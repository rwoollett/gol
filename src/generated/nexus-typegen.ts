/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../api/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BoardRowsInput: { // input type
    data: string[][]; // [[String!]!]!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  BoardRow: { // root type
    cols: string[]; // [String!]!
    id: number; // Int!
    order: number; // Int!
    taskId: number; // Int!
  }
  BoardRowResult: { // root type
    cols: string[]; // [String!]!
    id: number; // Int!
    order: number; // Int!
    taskResultId: number; // Int!
  }
  Mutation: {};
  Query: {};
  Task: { // root type
    allocated: boolean; // Boolean!
    genId: string; // String!
    id: number; // Int!
    length: number; // Int!
    row: number; // Int!
    rows: Array<NexusGenRootTypes['BoardRow'] | null>; // [BoardRow]!
  }
  TaskResult: { // root type
    genId: string; // String!
    id: number; // Int!
    length: number; // Int!
    row: number; // Int!
    rows: Array<NexusGenRootTypes['BoardRowResult'] | null>; // [BoardRowResult]!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  BoardRow: { // field return type
    cols: string[]; // [String!]!
    id: number; // Int!
    order: number; // Int!
    taskId: number; // Int!
  }
  BoardRowResult: { // field return type
    cols: string[]; // [String!]!
    id: number; // Int!
    order: number; // Int!
    taskResultId: number; // Int!
  }
  Mutation: { // field return type
    postTask: NexusGenRootTypes['Task']; // Task!
    postTaskResult: NexusGenRootTypes['TaskResult']; // TaskResult!
  }
  Query: { // field return type
    getNextTask: NexusGenRootTypes['Task'] | null; // Task
    getTaskResultByGenID: Array<NexusGenRootTypes['TaskResult'] | null> | null; // [TaskResult]
  }
  Task: { // field return type
    allocated: boolean; // Boolean!
    genId: string; // String!
    id: number; // Int!
    length: number; // Int!
    row: number; // Int!
    rows: Array<NexusGenRootTypes['BoardRow'] | null>; // [BoardRow]!
  }
  TaskResult: { // field return type
    genId: string; // String!
    id: number; // Int!
    length: number; // Int!
    row: number; // Int!
    rows: Array<NexusGenRootTypes['BoardRowResult'] | null>; // [BoardRowResult]!
  }
}

export interface NexusGenFieldTypeNames {
  BoardRow: { // field return type name
    cols: 'String'
    id: 'Int'
    order: 'Int'
    taskId: 'Int'
  }
  BoardRowResult: { // field return type name
    cols: 'String'
    id: 'Int'
    order: 'Int'
    taskResultId: 'Int'
  }
  Mutation: { // field return type name
    postTask: 'Task'
    postTaskResult: 'TaskResult'
  }
  Query: { // field return type name
    getNextTask: 'Task'
    getTaskResultByGenID: 'TaskResult'
  }
  Task: { // field return type name
    allocated: 'Boolean'
    genId: 'String'
    id: 'Int'
    length: 'Int'
    row: 'Int'
    rows: 'BoardRow'
  }
  TaskResult: { // field return type name
    genId: 'String'
    id: 'Int'
    length: 'Int'
    row: 'Int'
    rows: 'BoardRowResult'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    postTask: { // args
      genId: string; // String!
      length: number; // Int!
      row: number; // Int!
      rows: NexusGenInputs['BoardRowsInput']; // BoardRowsInput!
    }
    postTaskResult: { // args
      genId: string; // String!
      length: number; // Int!
      row: number; // Int!
      rows: NexusGenInputs['BoardRowsInput']; // BoardRowsInput!
    }
  }
  Query: {
    getTaskResultByGenID: { // args
      genId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}